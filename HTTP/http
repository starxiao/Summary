http

1. 定义
	
	http协议即超文本传送协议(Hyper Text Transfer Protocol)，建议在TCP协议上用于在客户端与web服务器通信的应用层协议。

	URL在浏览器上输入的地址（uniform resource locater）统一资源定位符

2. http过程

	client                       server
				request
			    ------->
			    <-------
			    response

	2.1 根据TCP/IP协议建立TCP连接，设置端口为80。

	2.2 建立连接后客户端会发送一个请求(request)：请求命令GET index.html HTTP/1.1和Useragent/Origin/Accept等请求头信息。

	2.3 服务器收到请求后，根据请求信息进行响应(response): HTTP/1.1 200 OK和 Content-type/cache-control/等响应头信息。

	2.4 服务器按照和客户端约定的Content-Type数据格式将数据发送到客户端。

	2.5 数据传输完成后，双方断开TCP连接。

3. HTTP协议

	3.1 通过请求和响应进行通信，客户端发起请求，服务器才会响应。

	3.2 HTTP是不保存状态的协议，不对请求和响应之前的通信状态进行保存。于是引入cookie技术进行管理HTTP状态

	3.4 cookie状态管理，客户端发送请求到服务端后。服务端会返回一个Set-Cookie首部字段信息，客户端接收到后进行保存。
		下次请求的时候在报文中加入cookie再发送。服务器接收cookie后便可识别到之前的状态信息。

	3.5 HTTP请求方法

		GET: 用来访问服务器上的资源，也可以用来传输资源。但是数据默认添加到url上，传输数据少也会不安全

		POST： 用来传输资源到服务器上。传输的资源添加到http body里，传输数据多，并且相对GET安全

		HEAD: 用来访问服务器的资源，在服务响应的时候不返回数据只访问响应头。常用来查看服务器的性能

		PUT: 传输文件

		DELETE: 删除指定资源

		OPTIONS: 查询针对请求URL指定的资源支持的方法。常出现在当ajax请求为跨域并且是复杂请求时，浏览器会默认发送一个options请求询问服务器支持客户端请求的方法。

		TRACE： 请求服务器回显其收到的请求信息，常用于HTTP请求的测试和诊断

		CONNECT: 要求在和代理服务器通信时建立隧道，实现用隧道协议进场TCP通信。主要使用SSL和TSL协议吧通信内容加密经过网络隧道传输。

4. HTTP报文
	
	4.1 HTTP报文可分为报文首部和报文主体两部分

	request: POST /index.html HTTP/1.1          -- 请求行

			Content-Type: application/x-www-for-urlencoded

			Host: baidu.com                -- 请求首部

			Origin: baidu.com

			username=xiaoxx&paword=123456   -- 请求主体

	response: HTTP/1.1 200 OK              -- 响应行

			Content-Length: 256
			Content-Type: text/html         -- 响应首部

			'{user:xiaoxx,password:123456}'   -- 响应主体

	4.2 HTTP 报文首部字段

		4.2.1 报文首部字段结构
			报文首部字段是由首部字段名和字段值构成的，中间使用冒号":"分隔。

			HTTP首部字段可以有多个值

			报文首部如果存在两个或以上的相同的首部字段名时，不同浏览器有不同的处理逻辑。大多数情况下是都不生效。

				首部字段名                   冒号                    字段值

				Content-Type                 :                       text/html; charset=UTF-8

				Connection                   :                        keep-alive
		
		4.2.2 首部字段类型

			通用首部字段                             请求报文和响应报文都会使用

			请求首部字段						     客户端向服务端发送请求的请求报文首部

			响应首部字段						     服务端向客户端返回的响应报文首部

			实体首部字段							 针对请求报文和响应报文的实体部分使用	


		4.2.3 通用首部字段（HTTP/1.1）

			Conntent-Type                            数据传输格式

			Cache-Control                            控制缓存行为

			Connection                               TCP连接的管理(keep-alive表示不断开TCP连接，已达到复用)

			Date 									 创建报文的日期时间
 
			Pragma                                   报文指令

			Transfer-Encoding                        指定报文主体的传输编码方式

			Upgrade									 升级为其他协议

			Via										 代理服务器的相关信息

			Warning									 错误通知

	4.3 HTTP 响应状态

		状态通常由协议版本、数字状态码及相对应的状态描述。

		4.3.1 常见状态码

			200 OK 客户端请求成功

			301 Moved Permanently  请求永久重定向

			302 Moved Temporarily  请求临时重定向

			304 Not Modifyed 文件未修改，可以直接读取缓存文件

			400 Bad Request 客户端请求错误

			401 Unauothoried 请求未授权，无登陆态

			403 Forbidden 服务已收到请求，但拒绝提供服务

			404 Not Found 请求的资源不存在

			500 Internal Server Error 服务器发生错误

			503 Service Unavaliable 服务器当前发生错误，一段时间后可能会恢复正常

5. HTTP/1.1

	1. 持久化连接，默认打开connection: keep-alive。即TCP连接默认是不关闭的，可以被多个请求复用。对于同一个域名，大多数浏览器允许同时建立6个连接。

	2. 管道机制，即在同一个TCP连接里，客户端可以发送多个请求,，但是服务器还是只能处理完一个请求后，才能处理下一个请求。

	3. Content-Length: 知道返回数据的长度

	4. 分块传输： 产生一块数据就传输一块，不并等到服务器处理完成后才能传输。Transfer-Encoding: chunked


6. HTTP/2

	1. 二进制协议。

		HTTP/1.1的头信息是文本或者二进制。但是HTTP/2是一个彻底的二进制协议，头信息和数据体都是二进制，统称为帧，头信息帧和数据帧。二进制的好处是方便解析数据。

	2. 多路复用(双向的、实时的通信->多工) 允许并行请求，并行响应

		http1.1存在的问题(串行的文件传输)、(连接数过多) 因为浏览器的限制，一般浏览器发起的最大请求数为6。

		HTTP/2复用TCP连接，允许客户端发送多个请求到服务器上，服务器上可以设置请求优先级，先把重要的结果先返回

		服务器如果遇到A请求的处理时间较长，可以先把部分数据返回，然后处理B请求，处理完B请求后再处理A请求。这样就不会造成头阻塞现象。

		好处：
			同域名下所有通信都在单个TCP连接上完成。

			并行交错地发送多个请求/响应，请求/响应之间互不影响。

			使用优先值处理请求，值越低越优先被处理。值越大表示优先级越低，0表示优先级最高。

	3. 数据流

		HTTP/2的数据包是不按顺序发送的，所以必须要采用数据流ID对其作出标记。

	4. 头信息压缩

		HTTP/1.1每次请求都需要带上状态信息，有些字段是重复的比如:Cookie,Useragent。

		HTTP/2 对头信息都会合并客户端和服务器共同的信息，并采用gizp或compress压缩后再传输。

	5. 服务器推送

		HTTP/2 允许服务器向客户端主动发送资源-> server push

		服务器可以把提前使用的js、css推送到客户端，这样不并等到客户端解析完HTML后再发送请求。

		客户端可以发送RST_STREAM帧来拒收服务器的主动推送。

		主动推送也需要遵循同源策略，服务器不能随便将第三方资源推送到客户端，必须经过双方确认。

7. HTTP/2相比于HTTP1.1

	1. 二机制流、数据流传输。

	2. 多路复用，在一个TCP连接里并行完成同域名下所有的请求和响应，设置优先级以解决头部阻塞的问题。

	3. 头信息合并并压缩以减少传输数据量。

	4. 服务器推送预加载资源，不必等到客户端再发送一个请求。

	5. 因为存在HTTP/2 基于HTTP1.1的优化以下没必要了


		域名分片。因为浏览器的每个域名的请求为6个，所以增加域名数。
		
		js、css多个小文件合并成大文件，已降低请求数

		Spriting 雪碧图，多个图合在一起返回。

		内容内嵌

8. HTTP/3
	
	HTTP/3是基于UDP+QUIC协议实现的。

	QUIC取代TCP、SSL/TSL的传输协议。QUIC使用了DH秘钥算法实现客户端与服务端的建连只需一个RTT

	HTTP/2具有严格的顺序控制，那一个帧丢失后必须要重传，这样导致客户端已接收到的数据不能被处理从而导致阻塞。

	而HTTP/3基于UDP，UDP是无顺序的，不具备这个机制。


